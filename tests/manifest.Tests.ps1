Describe "Manifests" {

    BeforeAll {
        # ----------------
        # SECTION: Setup
        # ----------------
        $TMP_DIR = [System.IO.Path]::GetTempPath()

        # -- Kubeconform -- #
        $schema_locations = @(
            "default"
            "$($TMP_DIR)\\flux-crd-schemas"
            "https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json"
            "https://raw.githubusercontent.com/marcolongol/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json"
            "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/{{.NormalizedKubernetesVersion}}/{{.ResourceKind}}.json"
            "https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/{{.ResourceKind}}.json"
        )

        $ignored_resources = "Secret" # Ignored due to additional fields generated by SOPS
        $kubeconform_config = @("-strict", "-verbose", "-summary", "-skip", $ignored_resources)

        ForEach ($schema_location in $schema_locations) {
            $kubeconform_config += ("-schema-location", $schema_location)
        }

        # -- Download Flux CRDs-- #
        Write-Debug "INFO - Downloading Flux OpenAPI schemas"
        New-Item -ItemType Directory -Force -Path "$($TMP_DIR)\\flux-crd-schemas"
        Invoke-WebRequest -Uri "https://github.com/fluxcd/flux2/releases/latest/download/crd-schemas.tar.gz" -OutFile "$($TMP_DIR)\\crd-schemas.tar.gz"
        tar -xf "$($TMP_DIR)\\crd-schemas.tar.gz" -C "$($TMP_DIR)\\flux-crd-schemas"
    }
    
    # ----------------
    # SECTION: Tests
    # ----------------
    
    # -- YAML -- #
    Context "Valid YAML files" {
        ForEach ($file in Get-ChildItem -Path . -Include ("*.yaml", "*.yml") -Recurse) {
            It "$($file) should be valid YAML" -TestCases @(
                @{file = $file }
            ) {
                $res = yq e 'true' $_.file.FullName
                if ($LASTEXITCODE -ne 0) {
                    Write-Debug "ERROR - $res"
                }
                $LASTEXITCODE | Should -BeFalse
            }
        }
    }
    
    # -- K8s -- #
    Context "Valid K8s resources" {
        ForEach ($file in Get-ChildItem -Path ./kubernetes/cluster -Include ("*.yaml", "*.yml") -Recurse) {
            It "$($file) should be valid k8s resource" -TestCases @(
                @{file = $file }
            ) {
                $res = kubeconform $kubeconform_config $_.file.FullName
                if ($LASTEXITCODE -ne 0) {
                    Write-Debug "ERROR - $res"
                }
                $LASTEXITCODE | Should -BeFalse
            }
        }
    }
    
    # -- Kustomize -- #
    Context "Valid Kustomize overlays" {

        # -- Kustomize -- #
        $kustomize_flags = @("--load-restrictor=LoadRestrictionsNone")

        # -- Get all kustomize overlays -- # 
        $kustomize_dirs = Get-ChildItem -Path . -Include ("kustomization.yaml") -Recurse | Select-Object -ExpandProperty DirectoryName -ErrorAction SilentlyContinue | Sort-Object -Unique 
        
        ForEach ($dir in $kustomize_dirs) {
            It "$($dir) should be valid kustomize overlay" -TestCases @(
                @{dir = $dir }
            ) {

                $res1 = kustomize build $dir $kustomize_flags --enable-helm
                $exit1 = $LASTEXITCODE 
                $res2 = $res1 | kubeconform $kubeconform_config
                $exit2 = $LASTEXITCODE

                if ($exit1 -ne 0) {
                    Write-Debug "ERROR - $res1"
                }

                if ($exit2 -ne 0) {
                    Write-Debug "ERROR - $res2"
                }
                
                $exit1 | Should -BeFalse
                $exit2 | Should -BeFalse
                
            }
        }
    }

}
